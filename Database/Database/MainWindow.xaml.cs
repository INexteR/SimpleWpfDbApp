using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Data.SqlClient;

namespace Database
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private static readonly SqlConnection connection = new(@"Data Source=desktop-nnv6bbh;Initial Catalog=DB;Integrated Security=True");
        private readonly SqlDataAdapter adapter = new("select * from Users", connection);
        private readonly DataTable table = new();
        public MainWindow()
        {
            InitializeComponent();
            Load();
        }

        private void Load()
        { //инициализация данного объекта автоматически создает в адаптере команды для добавления, редактирования и удаления данных
            new SqlCommandBuilder(adapter);
            //заполнить логическую таблицу всеми данными из таблицы бд
            adapter.Fill(table);
            //задать DataGrid в качестве источника данных представление таблицы по умолчанию
            dg.ItemsSource = table.DefaultView;
        }

        private void Dg_AutoGeneratedColumns(object? sender, EventArgs e)
        { //после генерации столбцов задать им путёвые заголовки
            dg.Columns[0].Visibility = Visibility.Collapsed; //не отображать столбец Id
            DataGridTextColumn nameColumn = (DataGridTextColumn)dg.Columns[1];
            nameColumn.Header = "Имя";
            nameColumn.IsReadOnly = true;
            nameColumn.Width = new(1, DataGridLengthUnitType.Star);
            nameColumn.ElementStyle = (Style)dg.Resources["columnStyle"];
            DataGridTextColumn ageColumn = (DataGridTextColumn)dg.Columns[2];
            ageColumn.Header = "Возраст";          
            ageColumn.IsReadOnly = true;
            ageColumn.Width = new(1, DataGridLengthUnitType.Star);
            ageColumn.ElementStyle = (Style)dg.Resources["columnStyle"];
        }

        private void TextBoxName_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            string key = e.Key.ToString();
            e.Handled = IsNumber(key);
        }

        private void TextBoxAge_PreviewKeyDown(object sender, KeyEventArgs e)
        { //блокировка ввода любых символов кроме цифр и Backspace
            string key = e.Key.ToString();
            e.Handled = !(IsNumber(key) || key is "Back"); 
        }

        private static bool IsNumber(string text)
        {
            foreach (char num in "0123456789")
            {
                if (text.Contains(num))
                {
                    return true;
                }
            }
            return false;
        }

        private void Add_Click(object sender, RoutedEventArgs e)
        {
            if (IsTextBoxesEmpty()) return;
            //создать строку с такой же схемой как в таблице
            DataRow row = table.NewRow();
            TrimTextBoxes();
            //заполнить данными
            row.ItemArray = new object[] { null!/* ← Первичный ключ*/, textBoxName.Text, textBoxAge.Text };
            //добавить строку в таблицу
            table.Rows.Add(row);
            //обновить бд в соответствии с данными в логической таблице
            adapter.Update(table);
            //открыть соединение
            connection.Open();
            //получить сгенерированный в бд первичный ключ для новой строки
            int id = (int)new SqlCommand("select top (1) Id from Users order by Id desc", connection).ExecuteScalar();
            //закрыть соединение
            connection.Close();
            //вставить первичный ключ в 1-ый столбец новой строки
            row["Id"] = id;
            //сохранить изменения строки
            row.AcceptChanges();
            ClearTextBoxes();
        }

        private void Update_Click(object sender, RoutedEventArgs e)
        {
            if (lastRow is null || IsTextBoxesEmpty()) return;
            lastRow["Name"] = textBoxName.Text;
            lastRow["Age"] = textBoxAge.Text;
            dg.UnselectAll();
            adapter.Update(table);
            ClearTextBoxes();
        }

        private void Delete_Click(object sender, RoutedEventArgs e)
        {
            if (dg.SelectedItems.Count is 0) return;
            while (dg.SelectedItems.Count != 0)
            {
                (dg.SelectedItems[0] as DataRowView)!.Delete();
            }
            adapter.Update(table);
            ClearTextBoxes();
        }

        private void Clear_Click(object sender, RoutedEventArgs e)
        {
            dg.UnselectAll();
            ClearTextBoxes();
        }

        private void ClearTextBoxes()
        {
            textBoxName.Clear();
            textBoxAge.Clear();
        }
        
        private void TrimTextBoxes()
        {
            textBoxName.Text = textBoxName.Text.Trim();
            textBoxAge.Text = textBoxAge.Text.Trim();
        }

        private bool IsTextBoxesEmpty()
        {
            return string.IsNullOrWhiteSpace(textBoxName.Text) ||
                   string.IsNullOrWhiteSpace(textBoxAge.Text);
        }

        private DataRowView lastRow = null!;
        private void DataGridRow_Selected(object sender, RoutedEventArgs e)
        {
            lastRow = (DataRowView)(sender as DataGridRow)!.Item;
            textBoxName.Text = (string)lastRow.Row["Name"];
            textBoxAge.Text = lastRow["Age"].ToString();
        }

    }
    public static class Extra
    {
        public static void Mes(this object o)
            => MessageBox.Show(o?.ToString() ?? "null...");
    }
}
